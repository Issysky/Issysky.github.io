(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{422:function(v,_,t){"use strict";t.r(_);var n=t(2),o=Object(n.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"语法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[v._v("#")]),v._v(" 语法")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("字符串解构")]),v._v("："),_("code",[v._v('const [a, b, c, d, e] = "hello"')])]),v._v(" "),_("li",[_("strong",[v._v("数值解构")]),v._v("："),_("code",[v._v("const { toString: s } = 123")]),v._v("\n-此时输出s会得到一个toString函数")]),v._v(" "),_("li",[_("strong",[v._v("布尔解构")]),v._v("："),_("code",[v._v("const { toString: b } = true")]),v._v("\n-此时输出同样会得到一个toString函数")]),v._v(" "),_("li",[_("strong",[v._v("对象解构")])]),v._v(" "),_("li",[v._v("形式："),_("code",[v._v("const { x, y } = { x: 1, y: 2 }")]),v._v("\n-结果 x = 1,y=2")]),v._v(" "),_("li",[v._v("默认："),_("code",[v._v("const { x, y = 2 } = { x: 1 }")]),v._v("\n-结果x = 1，y=2")]),v._v(" "),_("li",[v._v("改名："),_("code",[v._v("const { x, y: z } = { x: 1, y: 2 }")]),v._v("\n-结果x=1，z=2")]),v._v(" "),_("li",[_("strong",[v._v("数组解构")])]),v._v(" "),_("li",[v._v("规则：数据结构具有"),_("code",[v._v("Iterator接口")]),v._v("可采用数组形式的解构赋值")]),v._v(" "),_("li",[v._v("形式："),_("code",[v._v("const [x, y] = [1, 2]")]),v._v("\n-结果x=1，y=2")]),v._v(" "),_("li",[v._v("默认："),_("code",[v._v("const [x, y = 2] = [1]")]),v._v("\n-结果x=1，y=2")]),v._v(" "),_("li",[_("strong",[v._v("函数参数解构")])]),v._v(" "),_("li",[v._v("数组解构："),_("code",[v._v("const x = function Func([x = 0, y = 1] = [5,6]) {}")])]),v._v(" "),_("li",[v._v("对象解构："),_("code",[v._v("const y = function Func({ x = 0, y = 1 } = {x:1 , y :2}) {}")]),v._v("\n-赋值结果和上述的解构结果相同。")])]),v._v(" "),_("h2",{attrs:{id:"实例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[v._v("#")]),v._v(" 实例")]),v._v(" "),_("ul",[_("li",[v._v("交换变量值："),_("code",[v._v("[x, y] = [y, x]")])]),v._v(" "),_("li",[v._v("返回函数多个值："),_("code",[v._v("const [x, y, z] = Func()")])]),v._v(" "),_("li",[v._v("定义函数参数："),_("code",[v._v("Func([1, 2])")])]),v._v(" "),_("li",[v._v("提取JSON数据："),_("code",[v._v("const { name, version } = packageJson")])]),v._v(" "),_("li",[v._v("定义函数参数默认值："),_("code",[v._v("function Func({ x = 1, y = 2 } = {}) {}")])]),v._v(" "),_("li",[v._v("遍历Map结构："),_("code",[v._v("for (let [k, v] of Map) {}")])]),v._v(" "),_("li",[v._v("输入模块指定属性和方法："),_("code",[v._v('const { readFile, writeFile } = require("fs")')])])]),v._v(" "),_("h2",{attrs:{id:"重难点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重难点"}},[v._v("#")]),v._v(" 重难点")]),v._v(" "),_("ul",[_("li",[v._v("匹配模式：只要等号两边的模式相同，左边的变量就会被赋予对应的值")]),v._v(" "),_("li",[v._v("解构赋值规则：只要等号右边的值不是对象或数组，就先将其转为对象")]),v._v(" "),_("li",[v._v("解构默认值生效条件：属性值严格等于"),_("code",[v._v("undefined")])]),v._v(" "),_("li",[v._v("解构遵循匹配模式")]),v._v(" "),_("li",[v._v("解构不成功时变量的值等于"),_("code",[v._v("undefined")])]),v._v(" "),_("li",[_("code",[v._v("undefined")]),v._v("和"),_("code",[v._v("null")]),v._v("无法转为对象，因此无法进行解构")])])])}),[],!1,null,null,null);_.default=o.exports}}]);