(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{430:function(t,s,v){"use strict";v.r(s);var _=v(2),n=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("字符串解构")]),t._v("："),s("code",[t._v('const [a, b, c, d, e] = "hello"')])]),t._v(" "),s("li",[s("strong",[t._v("数值解构")]),t._v("："),s("code",[t._v("const { toString: s } = 123")]),t._v("\n-此时输出s会得到一个toString函数")]),t._v(" "),s("li",[s("strong",[t._v("布尔解构")]),t._v("："),s("code",[t._v("const { toString: b } = true")]),t._v("\n-此时输出同样会得到一个toString函数")]),t._v(" "),s("li",[s("strong",[t._v("对象解构")])]),t._v(" "),s("li",[t._v("形式："),s("code",[t._v("const { x, y } = { x: 1, y: 2 }")]),t._v("\n-结果 x = 1,y=2")]),t._v(" "),s("li",[t._v("默认："),s("code",[t._v("const { x, y = 2 } = { x: 1 }")]),t._v("\n-结果x = 1，y=2")]),t._v(" "),s("li",[t._v("改名："),s("code",[t._v("const { x, y: z } = { x: 1, y: 2 }")]),t._v("\n-结果x=1，z=2")]),t._v(" "),s("li",[s("strong",[t._v("数组解构")])]),t._v(" "),s("li",[t._v("规则：数据结构具有"),s("code",[t._v("Iterator接口")]),t._v("可采用数组形式的解构赋值")]),t._v(" "),s("li",[t._v("形式："),s("code",[t._v("const [x, y] = [1, 2]")]),t._v("\n-结果x=1，y=2")]),t._v(" "),s("li",[t._v("默认："),s("code",[t._v("const [x, y = 2] = [1]")]),t._v("\n-结果x=1，y=2")]),t._v(" "),s("li",[s("strong",[t._v("函数参数解构")])]),t._v(" "),s("li",[t._v("数组解构："),s("code",[t._v("const x = function Func([x = 0, y = 1] = [5,6]) {}")])]),t._v(" "),s("li",[t._v("对象解构："),s("code",[t._v("const y = function Func({ x = 0, y = 1 } = {x:1 , y :2}) {}")]),t._v("\n-赋值结果和上述的解构结果相同。")])]),t._v(" "),s("h2",{attrs:{id:"实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),s("ul",[s("li",[t._v("交换变量值："),s("code",[t._v("[x, y] = [y, x]")])]),t._v(" "),s("li",[t._v("返回函数多个值："),s("code",[t._v("const [x, y, z] = Func()")])]),t._v(" "),s("li",[t._v("定义函数参数："),s("code",[t._v("Func([1, 2])")])]),t._v(" "),s("li",[t._v("提取JSON数据："),s("code",[t._v("const { name, version } = packageJson")])]),t._v(" "),s("li",[t._v("定义函数参数默认值："),s("code",[t._v("function Func({ x = 1, y = 2 } = {}) {}")])]),t._v(" "),s("li",[t._v("遍历Map结构："),s("code",[t._v("for (let [k, v] of Map) {}")])]),t._v(" "),s("li",[t._v("输入模块指定属性和方法："),s("code",[t._v('const { readFile, writeFile } = require("fs")')])])]),t._v(" "),s("h2",{attrs:{id:"重难点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重难点"}},[t._v("#")]),t._v(" 重难点")]),t._v(" "),s("ul",[s("li",[t._v("匹配模式：只要等号两边的模式相同，左边的变量就会被赋予对应的值")]),t._v(" "),s("li",[t._v("解构赋值规则：只要等号右边的值不是对象或数组，就先将其转为对象")]),t._v(" "),s("li",[t._v("解构默认值生效条件：属性值严格等于"),s("code",[t._v("undefined")])]),t._v(" "),s("li",[t._v("解构遵循匹配模式")]),t._v(" "),s("li",[t._v("解构不成功时变量的值等于"),s("code",[t._v("undefined")])]),t._v(" "),s("li",[s("code",[t._v("undefined")]),t._v("和"),s("code",[t._v("null")]),t._v("无法转为对象，因此无法进行解构")])]),t._v(" "),s("h2",{attrs:{id:"扩展运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符"}},[t._v("#")]),t._v(" 扩展运算符")]),t._v(" "),s("p",[t._v("符号是  ...\n作用也很简单，就是把参数对象中所有的可遍历属性取出来拷贝到当前对象中")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" baz "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("bar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { a: 1, b: 2 }")]),t._v("\n")])])]),s("p",[t._v("数组，对象都可以使用")])])}),[],!1,null,null,null);s.default=n.exports}}]);